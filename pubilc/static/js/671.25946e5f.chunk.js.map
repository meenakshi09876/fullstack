{"version":3,"file":"static/js/671.25946e5f.chunk.js","mappings":"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","sources":["shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/hooks/form-hook.js","shared/util/validators.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","user/pages/Auth.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport Button from \"./Button\";\r\nimport \"./ImageUpload.css\";\r\n\r\nconst ImageUpload = (props) => {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickedHandler = (event) => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n    if (event.target.files && event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        id={props.id}\r\n        ref={filePickerRef}\r\n        style={{ display: \"none\" }}\r\n        type=\"file\"\r\n        accept=\".jpg,.png,.jpeg\"\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload${props.center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please Pick an image</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler} center>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import React, { useReducer, useEffect } from \"react\";\n\nimport { validate } from \"../../util/validators\";\nimport \"./Input.css\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case \"CHANGE\":\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case \"TOUCH\": {\n      return {\n        ...state,\n        isTouched: true,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || \"\",\n    isTouched: false,\n    isValid: props.initialValid || false,\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = (event) => {\n    dispatch({\n      type: \"CHANGE\",\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: \"TOUCH\",\n    });\n  };\n\n  const element =\n    props.element === \"input\" ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control ${\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\n      }`}\n    >\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\n\nimport \"./Card.css\";\n\nconst Card = (props) => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import { useCallback, useReducer } from \"react\";\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case \"INPUT_CHANGE\":\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if (!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid },\n        },\n        isValid: formIsValid,\n      };\n    case \"SET_DATA\":\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity,\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: \"INPUT_CHANGE\",\n      value: value,\n      isValid: isValid,\n      inputId: id,\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: \"SET_DATA\",\n      inputs: inputData,\n      formIsValid: formValidity,\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};\n","const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\nconst VALIDATOR_TYPE_MIN = \"MIN\";\nconst VALIDATOR_TYPE_MAX = \"MAX\";\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\nconst VALIDATOR_TYPE_FILE = \"FILE\";\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = (val) => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val,\n});\nexport const VALIDATOR_MAXLENGTH = (val) => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val,\n});\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import React, { useState, useContext } from \"react\";\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./Auth.css\";\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: \"\",\n        isValid: false,\n      },\n      password: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined,\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: \"\",\n            isValid: false,\n          },\n          image: {\n            value: null,\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n\n  const authSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + \"/users/login\",\n          \"POST\",\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          })\n          // {\n          //   \"Content-Type\": \"application/json\",\n          // }\n        );\n        auth.login(responseData.user.id);\n      } catch (err) {}\n    } else {\n      try {\n        const formData = new FormData();\n        formData.append(\"email\", formState.inputs.email.value);\n        formData.append(\"name\", formState.inputs.name.value);\n        formData.append(\"password\", formState.inputs.password.value);\n        formData.append(\"image\", formState.inputs.image.value);\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + \"users/signup\",\n          \"POST\",\n          formData\n        );\n\n        auth.login(responseData.user.id);\n      } catch (err) {}\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name.\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n            <ImageUpload\n              center\n              id=\"image\"\n              onInput={inputHandler}\n              errorText=\"Please provide an image.\"\n            />\n          )}\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-Mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password, at least 6 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\n        </Button>\n      </Card>\n    </React.Fragment>\n  );\n};\n\nexport default Auth;\n// const Auth = () => {\n//   const auth = useContext(AuthContext);\n//   const [isLoginMode, setIsLoginMode] = useState(true);\n//   const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n//   const [formState, inputHandler, setFormData] = useForm(\n//     {\n//       email: {\n//         value: \"\",\n//         isValid: false,\n//       },\n//       password: {\n//         value: \"\",\n//         isValid: false,\n//       },\n//     },\n//     false\n//   );\n\n//   const switchModeHandler = () => {\n//     if (!isLoginMode) {\n//       setFormData(\n//         {\n//           ...formState.inputs,\n//           name: undefined,\n//           image: undefined,\n//         },\n//         formState.inputs.email.isValid && formState.inputs.password.isValid\n//       );\n//     } else {\n//       setFormData(\n//         {\n//           ...formState.inputs,\n//           name: {\n//             value: \"\",\n//             isValid: false,\n//           },\n//           image: {\n//             value: null,\n//             isValid: false,\n//           },\n//         },\n//         false\n//       );\n//     }\n//     setIsLoginMode((prevMode) => !prevMode);\n//   };\n\n//   const authSubmitHandler = async (event) => {\n//     event.preventDefault();\n\n//     if (isLoginMode) {\n//       try {\n//         const responseData = await sendRequest(\n//           `${process.env.REACT_APP_BACKEND_URL}/users/login`,\n//           \"POST\",\n//           JSON.stringify({\n//             email: formState.inputs.email.value,\n//             password: formState.inputs.password.value,\n//           }),\n//           {\n//             \"Content-Type\": \"application/json\",\n//           }\n//         );\n//         auth.login(responseData.userId, responseData.token);\n//       } catch (err) {}\n//     } else {\n//       try {\n//         const formData = new FormData();\n//         formData.append(\"email\", formState.inputs.email.value);\n//         formData.append(\"name\", formState.inputs.name.value);\n//         formData.append(\"password\", formState.inputs.password.value);\n//         formData.append(\"image\", formState.inputs.image.value);\n//         const responseData = await sendRequest(\n//           process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\n//           \"POST\",\n//           formData\n//         );\n\n//         auth.login(responseData.userId, responseData.token);\n//       } catch (err) {}\n//     }\n//   };\n//   return (\n//     <React.Fragment>\n//       <ErrorModal error={error} onClear={clearError} />\n//       <Card className=\"authentication\">\n//         {isLoading && <LoadingSpinner asOverlay />}\n//         <h2>Login Required</h2>\n//         <hr />\n//         <form onSubmit={authSubmitHandler}>\n//           {!isLoginMode && (\n//             <Input\n//               element=\"input\"\n//               id=\"name\"\n//               type=\"text\"\n//               label=\"Your Name\"\n//               validators={[VALIDATOR_REQUIRE()]}\n//               errorText=\"Please enter a name.\"\n//               onInput={inputHandler}\n//             />\n//           )}\n//           {!isLoginMode && (\n//             <ImageUpload\n//               center\n//               id=\"image\"\n//               onInput={inputHandler}\n//               errorText=\"please provide an image\"\n//             />\n//           )}\n//           <Input\n//             element=\"input\"\n//             id=\"email\"\n//             type=\"email\"\n//             label=\"E-Mail\"\n//             validators={[VALIDATOR_EMAIL()]}\n//             errorText=\"Please enter a valid email address.\"\n//             onInput={inputHandler}\n//           />\n//           <Input\n//             element=\"input\"\n//             id=\"password\"\n//             type=\"password\"\n//             label=\"Password\"\n//             validators={[VALIDATOR_MINLENGTH(6)]}\n//             errorText=\"Please enter a valid password, at least 6 characters.\"\n//             onInput={inputHandler}\n//           />\n//           <Button type=\"submit\" disabled={!formState.isValid}>\n//             {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\n//           </Button>\n//         </form>\n//         <Button inverse onClick={switchModeHandler}>\n//           SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\n//         </Button>\n//       </Card>\n//     </React.Fragment>\n//   );\n// };\n\n// export default Auth;\n"],"names":["props","_useState","useState","_useState2","_slicedToArray","file","setFile","_useState3","_useState4","previewUrl","setPreviewUrl","_useState5","_useState6","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","_jsxs","className","children","_jsx","id","ref","style","display","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","concat","center","src","alt","Button","onClick","current","click","errorText","inputReducer","state","action","_objectSpread","value","val","validate","validators","isTouched","_useReducer","useReducer","initialValue","initialValid","_useReducer2","inputState","dispatch","changeHandler","touchHandler","element","placeholder","onBlur","rows","htmlFor","label","formReducer","formIsValid","inputId","inputs","_defineProperty","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","_step","_iterator","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","i","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","_createForOfIteratorHelper","validator","trim","test","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","_useHttpClient","useHttpClient","isLoading","error","sendRequest","clearError","_useForm","email","password","_useForm2","inputHandler","setFormData","authSubmitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","responseData","formData","_responseData","wrap","_context","prev","preventDefault","process","JSON","stringify","sent","login","user","t0","FormData","append","name","image","t1","stop","_x","apply","arguments","React","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","Input","ImageUpload","disabled","inverse","undefined","prevMode"],"sourceRoot":""}